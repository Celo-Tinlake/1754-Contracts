{
  "address": "0x1B25157F05B25438441bF7CDe38A95A55ccf8E50",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_interestModule",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "attestor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "score",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "details",
          "type": "bytes"
        }
      ],
      "name": "Attestation",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "attestor",
          "type": "address"
        }
      ],
      "name": "AttestorAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "attestor",
          "type": "address"
        }
      ],
      "name": "AttestorRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "LoanFulfilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountBorrowed",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "elapsedTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "changeToCredit",
          "type": "int256"
        }
      ],
      "name": "LoanFullyPaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amountPaid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "outstandingLoanAmount",
          "type": "uint256"
        }
      ],
      "name": "LoanPaymentMade",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "requestor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        }
      ],
      "name": "LoanRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "IDs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERCENT_DENOMINATOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAttestor",
          "type": "address"
        }
      ],
      "name": "addAttestor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "score",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "details",
          "type": "bytes"
        }
      ],
      "name": "attest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "attestors",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "creditId",
          "type": "uint256"
        }
      ],
      "name": "claimCredit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "contribute",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "creditScores",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "creditToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getAmountLeftToFill",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getAmountOwed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getRequester",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "interestModule",
      "outputs": [
        {
          "internalType": "contract InterestModuleLike",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "interestRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "loans",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "totalPaid",
          "type": "uint256"
        },
        {
          "internalType": "enum LoanStructures.LoanPurpose",
          "name": "purpose",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "closed",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "toRemove",
          "type": "address"
        }
      ],
      "name": "removeAttestor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "repayLoan",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum LoanStructures.LoanPurpose",
          "name": "purpose",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        }
      ],
      "name": "requestLoan",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "requestsByAddress",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "requestsById",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountFilled",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        },
        {
          "internalType": "enum LoanStructures.LoanPurpose",
          "name": "purpose",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "setCreditToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "settlementToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x858c8327fd8389b52bac1fd9e1bcc4270bfc0942274bde24b81efa2ae9a6e9f6",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x1B25157F05B25438441bF7CDe38A95A55ccf8E50",
    "transactionIndex": 2,
    "gasUsed": "3376037",
    "logsBloom": "0x
    "blockHash": "0xb4b3565724e0f2132253469f818aad20e0778b6aae59eddac44b2da7b588c5bf",
    "transactionHash": "0x858c8327fd8389b52bac1fd9e1bcc4270bfc0942274bde24b81efa2ae9a6e9f6",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 12148128,
        "transactionHash": "0x858c8327fd8389b52bac1fd9e1bcc4270bfc0942274bde24b81efa2ae9a6e9f6",
        "address": "0x1B25157F05B25438441bF7CDe38A95A55ccf8E50",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0xb4b3565724e0f2132253469f818aad20e0778b6aae59eddac44b2da7b588c5bf"
      }
    ],
    "blockNumber": 12148128,
    "cumulativeGasUsed": "7318811",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x874069Fa1Eb16D44d622F2e0Ca25eeA172369bC1",
    "0xb4e9A5BC64DC07f890367F72941403EEd7faDCbB"
  ],
  "numDeployments": 9,
  "solcInputHash": "287f0ac7a567ea91243b49ddaecf063d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_interestModule\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"attestor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"score\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"details\",\"type\":\"bytes\"}],\"name\":\"Attestation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"attestor\",\"type\":\"address\"}],\"name\":\"AttestorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"attestor\",\"type\":\"address\"}],\"name\":\"AttestorRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LoanFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountBorrowed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"elapsedTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"changeToCredit\",\"type\":\"int256\"}],\"name\":\"LoanFullyPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amountPaid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"outstandingLoanAmount\",\"type\":\"uint256\"}],\"name\":\"LoanPaymentMade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"requestor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"LoanRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"IDs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENT_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAttestor\",\"type\":\"address\"}],\"name\":\"addAttestor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"score\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"details\",\"type\":\"bytes\"}],\"name\":\"attest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"attestors\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"creditId\",\"type\":\"uint256\"}],\"name\":\"claimCredit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"contribute\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"creditScores\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creditToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getAmountLeftToFill\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getAmountOwed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getRequester\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interestModule\",\"outputs\":[{\"internalType\":\"contract InterestModuleLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interestRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"loans\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalPaid\",\"type\":\"uint256\"},{\"internalType\":\"enum LoanStructures.LoanPurpose\",\"name\":\"purpose\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"closed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toRemove\",\"type\":\"address\"}],\"name\":\"removeAttestor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"repayLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum LoanStructures.LoanPurpose\",\"name\":\"purpose\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"requestLoan\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"requestsByAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"requestsById\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountFilled\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum LoanStructures.LoanPurpose\",\"name\":\"purpose\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"setCreditToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"settlementToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/Borrowers/MicroLoanFactory.sol\":\"MicroLoanFactory\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":5000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x921f012325281f7d81e29c53a13824cf6c2c5d77232065d0d4f3f912e97af6ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x0d4de01fe5360c38b4ad2b0822a12722958428f5138a7ff47c1720eb6fa52bba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"src/Borrowers/ERC721Credit.sol\":{\"content\":\"// SPDX-License-Identifier: ISC\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport \\\"../Structures/CreditorStructures.sol\\\";\\n\\ncontract ERC721Credit is ERC721, CreditorStructures {\\n    mapping(uint256 => Credit) creditData; // Maps tokenIds to credit structure\\n    address minter;\\n    uint256 linesOfCredit;\\n\\n    constructor(address _minter)\\n        ERC721(\\\"1754 Bullet Loan Credit Receipts\\\", \\\"bFACT\\\")\\n    {\\n        minter = _minter;\\n        linesOfCredit = 0;\\n    }\\n\\n    modifier only_minter() {\\n        require(msg.sender == minter, \\\"Unauthorized\\\");\\n        _;\\n    }\\n\\n    function getCreditInfo(uint256 tokenId)\\n        external\\n        view\\n        returns (Credit memory credit, address owner)\\n    {\\n        require(_exists(tokenId), \\\"Line of credit does not exist\\\");\\n        credit = creditData[tokenId];\\n        owner = ownerOf(tokenId);\\n    }\\n\\n    function setAmountClaimed(uint256 tokenId, uint256 amountClaimed)\\n        external\\n        only_minter\\n    {\\n        require(_exists(tokenId), \\\"Line of credit does not exist\\\");\\n        Credit storage credit = creditData[tokenId];\\n        credit.amountClaimed = amountClaimed;\\n    }\\n\\n    function mint(CreditorStructures.CreditMintParams calldata params)\\n        external\\n        only_minter\\n        returns (uint256)\\n    {\\n        Credit storage credit = creditData[linesOfCredit];\\n        credit.amountSupplied = params.amountSupplied;\\n        credit.loanId = params.loanId;\\n        _mint(params.creditor, linesOfCredit);\\n        return linesOfCredit++;\\n    }\\n\\n    function burn(uint256 tokenId) external only_minter {\\n        _burn(tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0x215ee5dc8add4d596ac35c4eaa727e1d68e09d80b17215b91dbf5aafc9f9d116\",\"license\":\"ISC\"},\"src/Borrowers/IERC721Credit.sol\":{\"content\":\"// SPDX-License-Identifier: ISC\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport \\\"../Structures/CreditorStructures.sol\\\";\\n\\ninterface IERC721Credit is IERC721, CreditorStructures {\\n    function getCreditInfo(uint256 tokenId)\\n        external\\n        view\\n        returns (Credit memory credit, address owner);\\n\\n    function mint(CreditorStructures.CreditMintParams calldata params)\\n        external\\n        returns (uint256);\\n\\n    function burn(uint256 tokenId) external;\\n\\n    function setAmountClaimed(uint256 tokenId, uint256 amountClaimed) external;\\n}\\n\",\"keccak256\":\"0x28358b7ca8ee665af9dc17abceaaf08c44bc5934b3feaa32185020b52b98c112\",\"license\":\"ISC\"},\"src/Borrowers/MicroLoanFactory.sol\":{\"content\":\"// SPDX-License-Identifier: ISC\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"./IERC721Credit.sol\\\";\\nimport \\\"../Structures/CreditorStructures.sol\\\";\\nimport \\\"../Structures/LoanStructures.sol\\\";\\nimport \\\"../Structures/MicroLoanEvents.sol\\\";\\nimport \\\"./ERC721Credit.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface InterestModuleLike {\\n    function incDebt(uint256 loan, uint256 currencyAmount) external;\\n\\n    function decDebt(uint256 loan, uint256 currencyAmount) external;\\n\\n    function debt(uint256 loan) external view returns (uint256);\\n\\n    function rateDebt(uint256 rate) external view returns (uint256);\\n\\n    function setRate(uint256 loan, uint256 rate) external;\\n\\n    function changeRate(uint256 loan, uint256 newRate) external;\\n\\n    function accrue(uint256 loan) external;\\n\\n    function newLoan(\\n        uint256 loan,\\n        uint256 ratePerSecond,\\n        uint256 fixedRate\\n    ) external;\\n}\\n\\ncontract MicroLoanFactory is LoanStructures, MicroLoanEvents, Ownable {\\n    mapping(uint256 => Loan) public loans;\\n    mapping(uint256 => LoanRequest) public requestsById;\\n    mapping(address => uint256) public requestsByAddress;\\n    mapping(address => uint256) public creditScores;\\n    mapping(address => bool) public attestors;\\n    uint256 public interestRate = 10**9; // 10% interest rate\\n    address public settlementToken;\\n    address public creditToken;\\n    uint256 public IDs;\\n    InterestModuleLike public interestModule;\\n\\n    event AttestorAdded(address indexed attestor);\\n    event AttestorRemoved(address indexed attestor);\\n\\n    constructor(address token, address _interestModule) Ownable() {\\n        settlementToken = token;\\n        IDs = 1;\\n        interestModule = InterestModuleLike(_interestModule);\\n        ERC721Credit credit = new ERC721Credit(address(this));\\n        creditToken = address(credit);\\n    }\\n\\n    modifier loanExists(uint256 id) {\\n        require(loans[id].start > 0, \\\"Loan does not exist\\\");\\n        _;\\n    }\\n\\n    modifier requestExists(uint256 id) {\\n        require(\\n            requestsById[id].borrower != address(0),\\n            \\\"Request does not exist\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier attestor(address addr) {\\n        require(attestors[addr], \\\"Not an attestor\\\");\\n        _;\\n    }\\n\\n    function setCreditToken(address token) external onlyOwner {\\n        creditToken = token;\\n    }\\n\\n    function getAmountOwed(uint256 id) public view returns (uint256) {\\n        if (loans[id].closed || loans[id].id == 0) {\\n            return 0;\\n        }\\n\\n        return interestModule.debt(id);\\n    }\\n\\n    function getRequester(uint256 id) external view returns (address) {\\n        return requestsById[id].borrower;\\n    }\\n\\n    function getAmountLeftToFill(uint256 id) external view returns (uint256) {\\n        return requestsById[id].amount - requestsById[id].amountFilled;\\n    }\\n\\n    function addAttestor(address newAttestor) external onlyOwner {\\n        require(!attestors[newAttestor], \\\"Already an attestor\\\");\\n        attestors[newAttestor] = true;\\n\\n        emit AttestorAdded(newAttestor);\\n    }\\n\\n    function removeAttestor(address toRemove)\\n        external\\n        onlyOwner\\n        attestor(toRemove)\\n    {\\n        attestors[toRemove] = false;\\n\\n        emit AttestorRemoved(toRemove);\\n    }\\n\\n    function attest(\\n        uint256 loanId,\\n        uint256 score,\\n        bytes calldata details\\n    ) external attestor(msg.sender) {\\n        creditScores[requestsById[loanId].borrower] = score;\\n        emit Attestation(loanId, msg.sender, score, details);\\n    }\\n\\n    function requestLoan(\\n        LoanPurpose purpose,\\n        uint256 amount,\\n        uint256 duration\\n    ) external returns (uint256 loanId) {\\n        loanId = IDs;\\n        LoanRequest storage request = requestsById[IDs];\\n        request.amount = amount;\\n        request.borrower = msg.sender;\\n        request.purpose = purpose;\\n        request.duration = duration;\\n\\n        requestsByAddress[msg.sender] = loanId;\\n        emit LoanRequested(\\n            IDs,\\n            msg.sender,\\n            block.timestamp,\\n            amount,\\n            interestRate\\n        );\\n        IDs++;\\n    }\\n\\n    function _fulfillLoan(uint256 id) internal requestExists(id) {\\n        LoanRequest storage request = requestsById[id];\\n        require(\\n            loans[requestsByAddress[request.borrower]].start == 0 &&\\n                loans[id].start == 0,\\n            \\\"User has an outstanding loan\\\"\\n        );\\n        Loan storage loan = loans[id];\\n        loan.start = block.timestamp;\\n        loan.deadline = block.timestamp + request.duration;\\n        loan.id = id;\\n        loan.borrower = request.borrower;\\n        loan.purpose = request.purpose;\\n        loan.amount = request.amount;\\n        interestModule.newLoan(id, interestRate, interestRate);\\n        interestModule.incDebt(id, loan.amount);\\n\\n        IERC20(settlementToken).transfer(request.borrower, request.amount);\\n        emit LoanFulfilled(\\n            id,\\n            block.timestamp,\\n            request.borrower,\\n            request.amount\\n        );\\n    }\\n\\n    function contribute(uint256 id, uint256 amount) external returns (uint256) {\\n        LoanRequest storage request = requestsById[id];\\n        uint256 amountToFill = request.amount - request.amountFilled;\\n        uint256 fillAmount = amount > amountToFill ? amountToFill : amount;\\n        require(\\n            IERC20(settlementToken).transferFrom(\\n                msg.sender,\\n                address(this),\\n                fillAmount\\n            )\\n        );\\n        request.amountFilled += fillAmount;\\n        if (request.amountFilled == request.amount) {\\n            _fulfillLoan(id);\\n        }\\n        return\\n            IERC721Credit(creditToken).mint(\\n                CreditorStructures.CreditMintParams({\\n                    loanId: id,\\n                    amountSupplied: fillAmount,\\n                    creditor: msg.sender\\n                })\\n            );\\n    }\\n\\n    function calculateInterest(uint256 id) internal view returns (uint256) {\\n        return interestModule.debt(id);\\n    }\\n\\n    function closeLoan(uint256 id) internal {\\n        Loan storage loan = loans[id];\\n        loan.closed = true;\\n        uint256 elapsedTime = block.timestamp - loan.start;\\n        int256 creditChange = int256(block.timestamp) - int256(loan.start);\\n        creditScores[loan.borrower] =\\n            creditScores[loan.borrower] +\\n            block.timestamp -\\n            loan.start;\\n        emit LoanFullyPaid(\\n            id,\\n            block.timestamp,\\n            loan.borrower,\\n            loan.amount,\\n            elapsedTime,\\n            creditChange\\n        );\\n    }\\n\\n    function repayLoan(uint256 id, uint256 amount) external {\\n        Loan storage loan = loans[id];\\n        interestModule.accrue(id);\\n        uint256 totalOwed = interestModule.debt(id);\\n        require(totalOwed > 0, \\\"Does not owe anything\\\");\\n        uint256 amountPaid = amount > totalOwed ? totalOwed : amount;\\n        loan.totalPaid += amountPaid;\\n        require(\\n            IERC20(settlementToken).transferFrom(\\n                loan.borrower,\\n                address(this),\\n                amountPaid\\n            )\\n        );\\n        interestModule.decDebt(id, amountPaid);\\n        if (amountPaid == totalOwed) {\\n            closeLoan(id);\\n        }\\n        emit LoanPaymentMade(\\n            id,\\n            block.timestamp,\\n            loan.borrower,\\n            amountPaid,\\n            totalOwed - amountPaid\\n        );\\n    }\\n\\n    function claimCredit(uint256 creditId) external returns (uint256) {\\n        (\\n            CreditorStructures.Credit memory credit,\\n            address owner\\n        ) = IERC721Credit(creditToken).getCreditInfo(creditId);\\n        Loan storage loan = loans[credit.loanId];\\n        uint256 effectiveAmount = loan.totalPaid - credit.lastClaimedAt;\\n        uint256 entitledTo = (credit.amountSupplied * effectiveAmount) /\\n            loan.amount;\\n\\n        credit.lastClaimedAt = loan.totalPaid;\\n        IERC721Credit(creditToken).setAmountClaimed(creditId, entitledTo);\\n        IERC20(settlementToken).transfer(owner, entitledTo);\\n        return entitledTo;\\n    }\\n}\\n\",\"keccak256\":\"0x19a0edbd1cf6201bb61908dbf860694eadc1a13b9a23438f7b1a80a55272009b\",\"license\":\"ISC\"},\"src/Structures/CreditorStructures.sol\":{\"content\":\"// SPDX-License-Identifier: ISC\\n\\npragma solidity ^0.8.13;\\n\\ninterface CreditorStructures {\\n    struct Credit {\\n        uint256 loanId; // id of loan associated with\\n        uint256 amountSupplied;\\n        uint256 amountClaimed;\\n        uint256 lastClaimedAt;\\n    }\\n\\n    struct CreditMintParams {\\n        uint256 loanId;\\n        uint256 amountSupplied;\\n        address creditor;\\n    }\\n}\\n\",\"keccak256\":\"0xec44d035aab543804bec9d922367a47e53e0eb86bd303cafed492361664cb3a2\",\"license\":\"ISC\"},\"src/Structures/LoanStructures.sol\":{\"content\":\"// SPDX-License-Identifier: ISC\\n\\n// license: MIT\\n\\npragma solidity ^0.8.13;\\n\\ncontract LoanStructures {\\n    uint256 public constant PERCENT_DENOMINATOR = 10**10;\\n\\n    struct OutstandingLoan {\\n        uint256 amount;\\n        uint256 time;\\n    }\\n\\n    enum LoanPurpose {\\n        FOOD,\\n        WATER,\\n        HEALTH,\\n        SCHOOL,\\n        BILLS,\\n        TRANSPORT,\\n        OTHER\\n    }\\n\\n    struct Tranche {\\n        uint256 percent;\\n        uint256 weight;\\n    }\\n\\n    struct Loan {\\n        uint256 start;\\n        uint256 deadline;\\n        uint256 id;\\n        address borrower;\\n        uint256 totalPaid;\\n        LoanPurpose purpose;\\n        bool closed;\\n        uint256 amount;\\n    }\\n\\n    struct LoanRequest {\\n        uint256 amount;\\n        uint256 amountFilled;\\n        address borrower;\\n        uint256 duration;\\n        LoanPurpose purpose;\\n    }\\n}\\n\",\"keccak256\":\"0x951547737722096d1bc34d277c074a4d4538b2819102494ea3f81e4fdfac06a6\",\"license\":\"ISC\"},\"src/Structures/MicroLoanEvents.sol\":{\"content\":\"// SPDX-License-Identifier: ISC\\n\\npragma solidity ^0.8.13;\\n\\ninterface MicroLoanEvents {\\n    event LoanRequested(\\n        uint256 indexed id,\\n        address indexed requestor,\\n        uint256 timestamp,\\n        uint256 amount,\\n        uint256 rate\\n    );\\n\\n    event Attestation(\\n        uint256 indexed loanId,\\n        address indexed attestor,\\n        uint256 indexed score,\\n        bytes details\\n    );\\n\\n    event LoanFulfilled(\\n        uint256 indexed id,\\n        uint256 time,\\n        address indexed borrower,\\n        uint256 amount\\n    );\\n    event LoanPaymentMade(\\n        uint256 indexed id,\\n        uint256 time,\\n        address indexed borrower,\\n        uint256 indexed amountPaid,\\n        uint256 outstandingLoanAmount\\n    );\\n    event LoanFullyPaid(\\n        uint256 indexed id,\\n        uint256 time,\\n        address indexed borrower,\\n        uint256 amountBorrowed,\\n        uint256 elapsedTime,\\n        int256 changeToCredit\\n    );\\n}\\n\",\"keccak256\":\"0x111538469f03bd0310fbea81a119cac2ed00a48c836d76c66adc44f97ff9f685\",\"license\":\"ISC\"}},\"version\":1}",
  "bytecode": "0x6080604052633b9aca006006553480156200001957600080fd5b5060405162003b7138038062003b718339810160408190526200003c9162000162565b6200004733620000e7565b600780546001600160a01b038085166001600160a01b0319928316179092556001600955600a80549284169290911691909117905560405160009030906200008f9062000137565b6001600160a01b039091168152602001604051809103906000f080158015620000bc573d6000803e3d6000fd5b50600880546001600160a01b0319166001600160a01b0392909216919091179055506200019a915050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b611dab8062001dc683390190565b80516001600160a01b03811681146200015d57600080fd5b919050565b600080604083850312156200017657600080fd5b620001818362000145565b9150620001916020840162000145565b90509250929050565b611c1c80620001aa6000396000f3fe608060405234801561001057600080fd5b50600436106101a35760003560e01c80638c590917116100ee578063d139d9b911610097578063e0cae63511610071578063e0cae635146103d8578063e1ec3c68146103eb578063e847c83b14610460578063f2fde38b1461047357600080fd5b8063d139d9b914610357578063d8e1feed1461036a578063dc8de29b146103c557600080fd5b80639e6c2959116100c85780639e6c29591461032f5780639f9090c51461033b578063b39120231461034457600080fd5b80638c590917146102de5780638da5cb5b146102f157806399c6679d1461030257600080fd5b80637b185e2c1161015057806380bb72731161012a57806380bb727314610298578063899e5d85146102b85780638a700b53146102cb57600080fd5b80637b185e2c1461025c5780637b9e618d1461027c5780637c3a00fd1461028f57600080fd5b80635b91e8c3116101815780635b91e8c3146102165780636a134bd914610241578063715018a61461025457600080fd5b80631338e957146101a85780633756c22f146101e057806349a1e058146101f5575b600080fd5b6101cb6101b636600461171c565b60056020526000908152604090205460ff1681565b60405190151581526020015b60405180910390f35b6101f36101ee366004611740565b610486565b005b6102086102033660046117c0565b61055a565b6040519081526020016101d7565b600a54610229906001600160a01b031681565b6040516001600160a01b0390911681526020016101d7565b6101f361024f36600461171c565b610640565b6101f36106d4565b61020861026a36600461171c565b60036020526000908152604090205481565b600754610229906001600160a01b031681565b61020860065481565b6102086102a636600461171c565b60046020526000908152604090205481565b600854610229906001600160a01b031681565b6101f36102d93660046117f9565b61073a565b6102086102ec3660046117f9565b610a4a565b6000546001600160a01b0316610229565b61022961031036600461181b565b600090815260026020819052604090912001546001600160a01b031690565b6102086402540be40081565b61020860095481565b6101f361035236600461171c565b610c05565b61020861036536600461181b565b610d13565b6103b461037836600461181b565b6002602081905260009182526040909120805460018201549282015460038301546004909301549193926001600160a01b039091169160ff1685565b6040516101d795949392919061189e565b6102086103d336600461181b565b610de0565b6101f36103e636600461171c565b610fe5565b61044c6103f936600461181b565b60016020819052600091825260409091208054918101546002820154600383015460048401546005850154600690950154939492936001600160a01b0390921692909160ff808316926101009004169088565b6040516101d79897969594939291906118cf565b61020861046e36600461181b565b6110f4565b6101f361048136600461171c565b611113565b3360008181526005602052604090205460ff166104ea5760405162461bcd60e51b815260206004820152600f60248201527f4e6f7420616e206174746573746f72000000000000000000000000000000000060448201526064015b60405180910390fd5b6000858152600260208181526040808420909201546001600160a01b031683526004905290819020859055518490339087907f1321dc98926ed00f4f47a83b9953b28793bb014646db06929c8fe5fda6206bf09061054b908890889061191f565b60405180910390a45050505050565b600954600081815260026020819052604090912084815590810180547fffffffffffffffffffffffff0000000000000000000000000000000000000000163317905560048101805486919060ff191660018360068111156105bd576105bd611834565b0217905550600381810184905533600081815260209283526040908190208590556009546006548251428152948501899052848301529051919290917ff6cc19e46a340ab5888d736bfc79aef72ae92d12d7b76319d72b0abc170868e69181900360600190a3600980549060006106338361199b565b9190505550509392505050565b6000546001600160a01b0316331461069a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104e1565b600880547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b6000546001600160a01b0316331461072e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104e1565b61073860006111f5565b565b60008281526001602052604090819020600a5491517f744f4cf60000000000000000000000000000000000000000000000000000000081526004810185905290916001600160a01b03169063744f4cf690602401600060405180830381600087803b1580156107a857600080fd5b505af11580156107bc573d6000803e3d6000fd5b5050600a546040517f1e0029c800000000000000000000000000000000000000000000000000000000815260048101879052600093506001600160a01b039091169150631e0029c890602401602060405180830381865afa158015610825573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061084991906119d3565b90506000811161089b5760405162461bcd60e51b815260206004820152601560248201527f446f6573206e6f74206f776520616e797468696e67000000000000000000000060448201526064016104e1565b60008184116108aa57836108ac565b815b9050808360040160008282546108c291906119ec565b909155505060075460038401546040517f23b872dd0000000000000000000000000000000000000000000000000000000081526001600160a01b039182166004820152306024820152604481018490529116906323b872dd906064016020604051808303816000875af115801561093d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109619190611a04565b61096a57600080fd5b600a546040517f2047a26700000000000000000000000000000000000000000000000000000000815260048101879052602481018390526001600160a01b0390911690632047a26790604401600060405180830381600087803b1580156109d057600080fd5b505af11580156109e4573d6000803e3d6000fd5b505050508181036109f8576109f88561125d565b600383015481906001600160a01b0316867fa5429926614dc1f98f159430591aa6b73ddbcbfc1431ec98a7efe706b936747942610a358588611a26565b6040805192835260208301919091520161054b565b6000828152600260205260408120600181015481548391610a6a91611a26565b90506000818511610a7b5784610a7d565b815b6007546040517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018390529192506001600160a01b0316906323b872dd906064016020604051808303816000875af1158015610aee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b129190611a04565b610b1b57600080fd5b80836001016000828254610b2f91906119ec565b90915550508254600184015403610b4957610b498661136e565b60085460408051606081018252888152602081018481523382840190815292517fb2e0c9a00000000000000000000000000000000000000000000000000000000081529151600483015251602482015290516001600160a01b0390811660448301529091169063b2e0c9a0906064016020604051808303816000875af1158015610bd7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bfb91906119d3565b9695505050505050565b6000546001600160a01b03163314610c5f5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104e1565b6001600160a01b038116600090815260056020526040902054819060ff16610cc95760405162461bcd60e51b815260206004820152600f60248201527f4e6f7420616e206174746573746f72000000000000000000000000000000000060448201526064016104e1565b6001600160a01b038216600081815260056020526040808220805460ff19169055517f7b1e5155c9ac76eaa3c56fcf63a3383cd696a6fa84c49901c7ae374c0a5086129190a25050565b600081815260016020526040812060050154610100900460ff1680610d475750600082815260016020526040902060020154155b15610d5457506000919050565b600a546040517f1e0029c8000000000000000000000000000000000000000000000000000000008152600481018490526001600160a01b0390911690631e0029c890602401602060405180830381865afa158015610db6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dda91906119d3565b92915050565b6008546040517f7c37722300000000000000000000000000000000000000000000000000000000815260048101839052600091829182916001600160a01b031690637c3772239060240160a060405180830381865afa158015610e47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e6b9190611a4d565b8151600090815260016020526040812060608401516004820154949650929450929091610e9791611a26565b905060008260060154828660200151610eb09190611afa565b610eba9190611b37565b60048085015460608801526008546040517f7ff241ce0000000000000000000000000000000000000000000000000000000081529293506001600160a01b031691637ff241ce91610f18918b91869101918252602082015260400190565b600060405180830381600087803b158015610f3257600080fd5b505af1158015610f46573d6000803e3d6000fd5b50506007546040517fa9059cbb0000000000000000000000000000000000000000000000000000000081526001600160a01b03888116600483015260248201869052909116925063a9059cbb91506044016020604051808303816000875af1158015610fb6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fda9190611a04565b509695505050505050565b6000546001600160a01b0316331461103f5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104e1565b6001600160a01b03811660009081526005602052604090205460ff16156110a85760405162461bcd60e51b815260206004820152601360248201527f416c726561647920616e206174746573746f720000000000000000000000000060448201526064016104e1565b6001600160a01b038116600081815260056020526040808220805460ff19166001179055517f945c4a21d3fce955d17e31fcc471734b3d754c032b3805b02fe75d89c29b2a3a9190a250565b600081815260026020526040812060018101549054610dda9190611a26565b6000546001600160a01b0316331461116d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104e1565b6001600160a01b0381166111e95760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016104e1565b6111f2816111f5565b50565b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60008181526001602052604081206005810180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1661010017905580549091906112a89042611a26565b82549091506000906112ba9042611b72565b835460038501546001600160a01b0316600090815260046020526040902054919250906112e89042906119ec565b6112f29190611a26565b6003840180546001600160a01b03908116600090815260046020908152604091829020949094559154600687015483514281529485015291830185905260608301849052169085907f5751530710eb6f83af18f5aba63d1721745fa34ea155523a93b06d58aadc3ceb906080015b60405180910390a350505050565b6000818152600260208190526040909120015481906001600160a01b03166113d85760405162461bcd60e51b815260206004820152601660248201527f5265717565737420646f6573206e6f742065786973740000000000000000000060448201526064016104e1565b6000828152600260208181526040808420928301546001600160a01b03168452600382528084205484526001909152909120541580156114245750600083815260016020526040902054155b6114705760405162461bcd60e51b815260206004820152601c60248201527f557365722068617320616e206f75747374616e64696e67206c6f616e0000000060448201526064016104e1565b6000838152600160205260409020428082556003830154611490916119ec565b60018083019190915560028083018690558301546003830180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03909216919091179055600483015460058301805460ff90921692909160ff19169083600681111561150757611507611834565b02179055508154600682810191909155600a5490546040517f1ec9f27b000000000000000000000000000000000000000000000000000000008152600481018790526024810182905260448101919091526001600160a01b0390911690631ec9f27b90606401600060405180830381600087803b15801561158757600080fd5b505af115801561159b573d6000803e3d6000fd5b5050600a5460068401546040517f071ffb3c0000000000000000000000000000000000000000000000000000000081526004810189905260248101919091526001600160a01b03909116925063071ffb3c9150604401600060405180830381600087803b15801561160b57600080fd5b505af115801561161f573d6000803e3d6000fd5b5050600754600285015485546040517fa9059cbb0000000000000000000000000000000000000000000000000000000081526001600160a01b03928316600482015260248101919091529116925063a9059cbb91506044016020604051808303816000875af1158015611696573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116ba9190611a04565b50600282015482546040516001600160a01b039092169186917f2b1eb56f9d2886ace1dfc4a1acf6a640b828f3782247397ebf22f6cf09665b7e9161136091428252602082015260400190565b6001600160a01b03811681146111f257600080fd5b60006020828403121561172e57600080fd5b813561173981611707565b9392505050565b6000806000806060858703121561175657600080fd5b8435935060208501359250604085013567ffffffffffffffff8082111561177c57600080fd5b818701915087601f83011261179057600080fd5b81358181111561179f57600080fd5b8860208285010111156117b157600080fd5b95989497505060200194505050565b6000806000606084860312156117d557600080fd5b8335600781106117e457600080fd5b95602085013595506040909401359392505050565b6000806040838503121561180c57600080fd5b50508035926020909101359150565b60006020828403121561182d57600080fd5b5035919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6007811061189a577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b9052565b858152602081018590526001600160a01b03841660408201526060810183905260a08101610bfb6080830184611863565b6000610100820190508982528860208301528760408301526001600160a01b038716606083015285608083015261190960a0830186611863565b92151560c082015260e001529695505050505050565b60208152816020820152818360408301376000818301604090810191909152601f9092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0160101919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036119cc576119cc61196c565b5060010190565b6000602082840312156119e557600080fd5b5051919050565b600082198211156119ff576119ff61196c565b500190565b600060208284031215611a1657600080fd5b8151801515811461173957600080fd5b600082821015611a3857611a3861196c565b500390565b8051611a4881611707565b919050565b60008082840360a0811215611a6157600080fd5b6080811215611a6f57600080fd5b506040516080810181811067ffffffffffffffff82111715611aba577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b80604052508351815260208401516020820152604084015160408201526060840151606082015280925050611af160808401611a3d565b90509250929050565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611b3257611b3261196c565b500290565b600082611b6d577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b6000808312837f800000000000000000000000000000000000000000000000000000000000000001831281151615611bac57611bac61196c565b837f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff018313811615611be057611be061196c565b5050039056fea264697066735822122012e119a9a3d5a76b962f328720dd45aa72a141d80b58a538081faf4f96bffcfd64736f6c634300080d003360806040523480156200001157600080fd5b5060405162001dab38038062001dab83398101604081905262000034916200018b565b6040518060400160405280602081526020017f313735342042756c6c6574204c6f616e204372656469742052656365697074738152506040518060400160405280600581526020016418919050d560da1b8152508160009080519060200190620000a0929190620000e5565b508051620000b6906001906020840190620000e5565b5050600780546001600160a01b0319166001600160a01b039390931692909217909155506000600855620001f9565b828054620000f390620001bd565b90600052602060002090601f01602090048101928262000117576000855562000162565b82601f106200013257805160ff191683800117855562000162565b8280016001018555821562000162579182015b828111156200016257825182559160200191906001019062000145565b506200017092915062000174565b5090565b5b8082111562000170576000815560010162000175565b6000602082840312156200019e57600080fd5b81516001600160a01b0381168114620001b657600080fd5b9392505050565b600181811c90821680620001d257607f821691505b602082108103620001f357634e487b7160e01b600052602260045260246000fd5b50919050565b611ba280620002096000396000f3fe608060405234801561001057600080fd5b506004361061011b5760003560e01c806370a08231116100b2578063a22cb46511610081578063b88d4fde11610066578063b88d4fde1461029e578063c87b56dd146102b1578063e985e9c5146102c457600080fd5b8063a22cb46514610278578063b2e0c9a01461028b57600080fd5b806370a08231146101e95780637c3772231461020a5780637ff241ce1461025d57806395d89b411461027057600080fd5b806323b872dd116100ee57806323b872dd1461019d57806342842e0e146101b057806342966c68146101c35780636352211e146101d657600080fd5b806301ffc9a71461012057806306fdde0314610148578063081812fc1461015d578063095ea7b314610188575b600080fd5b61013361012e36600461168e565b610300565b60405190151581526020015b60405180910390f35b6101506103e5565b60405161013f9190611703565b61017061016b366004611716565b610477565b6040516001600160a01b03909116815260200161013f565b61019b610196366004611746565b610522565b005b61019b6101ab366004611770565b610653565b61019b6101be366004611770565b6106da565b61019b6101d1366004611716565b6106f5565b6101706101e4366004611716565b61075b565b6101fc6101f73660046117ac565b6107e6565b60405190815260200161013f565b61021d610218366004611716565b610880565b6040805183518152602080850151908201528382015191810191909152606092830151928101929092526001600160a01b0316608082015260a00161013f565b61019b61026b3660046117c7565b610967565b610150610a3a565b61019b6102863660046117e9565b610a49565b6101fc610299366004611825565b610a58565b61019b6102ac36600461186c565b610b11565b6101506102bf366004611716565b610b9f565b6101336102d2366004611948565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f80ac58cd00000000000000000000000000000000000000000000000000000000148061039357507fffffffff0000000000000000000000000000000000000000000000000000000082167f5b5e139f00000000000000000000000000000000000000000000000000000000145b806103df57507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b6060600080546103f49061197b565b80601f01602080910402602001604051908101604052809291908181526020018280546104209061197b565b801561046d5780601f106104425761010080835404028352916020019161046d565b820191906000526020600020905b81548152906001019060200180831161045057829003601f168201915b5050505050905090565b6000818152600260205260408120546001600160a01b03166105065760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201527f697374656e7420746f6b656e000000000000000000000000000000000000000060648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b600061052d8261075b565b9050806001600160a01b0316836001600160a01b0316036105b65760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560448201527f720000000000000000000000000000000000000000000000000000000000000060648201526084016104fd565b336001600160a01b03821614806105d257506105d281336102d2565b6106445760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c000000000000000060648201526084016104fd565b61064e8383610c95565b505050565b61065d3382610d1b565b6106cf5760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f76656400000000000000000000000000000060648201526084016104fd565b61064e838383610e23565b61064e83838360405180602001604052806000815250610b11565b6007546001600160a01b0316331461074f5760405162461bcd60e51b815260206004820152600c60248201527f556e617574686f72697a6564000000000000000000000000000000000000000060448201526064016104fd565b61075881611008565b50565b6000818152600260205260408120546001600160a01b0316806103df5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201527f656e7420746f6b656e000000000000000000000000000000000000000000000060648201526084016104fd565b60006001600160a01b0382166108645760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a6560448201527f726f20616464726573730000000000000000000000000000000000000000000060648201526084016104fd565b506001600160a01b031660009081526003602052604090205490565b6108ab6040518060800160405280600081526020016000815260200160008152602001600081525090565b6000828152600260205260408120546001600160a01b031661090f5760405162461bcd60e51b815260206004820152601d60248201527f4c696e65206f662063726564697420646f6573206e6f7420657869737400000060448201526064016104fd565b6006600084815260200190815260200160002060405180608001604052908160008201548152602001600182015481526020016002820154815260200160038201548152505091506109608361075b565b9050915091565b6007546001600160a01b031633146109c15760405162461bcd60e51b815260206004820152600c60248201527f556e617574686f72697a6564000000000000000000000000000000000000000060448201526064016104fd565b6000828152600260205260409020546001600160a01b0316610a255760405162461bcd60e51b815260206004820152601d60248201527f4c696e65206f662063726564697420646f6573206e6f7420657869737400000060448201526064016104fd565b60009182526006602052604090912060020155565b6060600180546103f49061197b565b610a543383836110bb565b5050565b6007546000906001600160a01b03163314610ab55760405162461bcd60e51b815260206004820152600c60248201527f556e617574686f72697a6564000000000000000000000000000000000000000060448201526064016104fd565b6008546000908152600660209081526040918290209084013560018201558335815590610af490610aec90606086019086016117ac565b6008546111a7565b60088054906000610b04836119f7565b919050559150505b919050565b610b1b3383610d1b565b610b8d5760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f76656400000000000000000000000000000060648201526084016104fd565b610b9984848484611301565b50505050565b6000818152600260205260409020546060906001600160a01b0316610c2c5760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201527f6e6578697374656e7420746f6b656e000000000000000000000000000000000060648201526084016104fd565b6000610c4360408051602081019091526000815290565b90506000815111610c635760405180602001604052806000815250610c8e565b80610c6d8461138a565b604051602001610c7e929190611a2f565b6040516020818303038152906040525b9392505050565b600081815260046020526040902080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0384169081179091558190610ce28261075b565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000818152600260205260408120546001600160a01b0316610da55760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201527f697374656e7420746f6b656e000000000000000000000000000000000000000060648201526084016104fd565b6000610db08361075b565b9050806001600160a01b0316846001600160a01b03161480610df757506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b80610e1b5750836001600160a01b0316610e1084610477565b6001600160a01b0316145b949350505050565b826001600160a01b0316610e368261075b565b6001600160a01b031614610eb25760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201527f6f776e657200000000000000000000000000000000000000000000000000000060648201526084016104fd565b6001600160a01b038216610f2d5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f2061646460448201527f726573730000000000000000000000000000000000000000000000000000000060648201526084016104fd565b610f38600082610c95565b6001600160a01b0383166000908152600360205260408120805460019290610f61908490611a5e565b90915550506001600160a01b0382166000908152600360205260408120805460019290610f8f908490611a75565b909155505060008181526002602052604080822080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b60006110138261075b565b9050611020600083610c95565b6001600160a01b0381166000908152600360205260408120805460019290611049908490611a5e565b909155505060008281526002602052604080822080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b816001600160a01b0316836001600160a01b03160361111c5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016104fd565b6001600160a01b0383811660008181526005602090815260408083209487168084529482529182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b0382166111fd5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016104fd565b6000818152600260205260409020546001600160a01b0316156112625760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016104fd565b6001600160a01b038216600090815260036020526040812080546001929061128b908490611a75565b909155505060008181526002602052604080822080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b61130c848484610e23565b611318848484846114bf565b610b995760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e746572000000000000000000000000000060648201526084016104fd565b6060816000036113cd57505060408051808201909152600181527f3000000000000000000000000000000000000000000000000000000000000000602082015290565b8160005b81156113f757806113e1816119f7565b91506113f09050600a83611abc565b91506113d1565b60008167ffffffffffffffff8111156114125761141261183d565b6040519080825280601f01601f19166020018201604052801561143c576020820181803683370190505b5090505b8415610e1b57611451600183611a5e565b915061145e600a86611ad0565b611469906030611a75565b60f81b81838151811061147e5761147e611ae4565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506114b8600a86611abc565b9450611440565b60006001600160a01b0384163b15611655576040517f150b7a020000000000000000000000000000000000000000000000000000000081526001600160a01b0385169063150b7a029061151c903390899088908890600401611b13565b6020604051808303816000875af1925050508015611557575060408051601f3d908101601f1916820190925261155491810190611b4f565b60015b61160a573d808015611585576040519150601f19603f3d011682016040523d82523d6000602084013e61158a565b606091505b5080516000036116025760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e746572000000000000000000000000000060648201526084016104fd565b805181602001fd5b7fffffffff00000000000000000000000000000000000000000000000000000000167f150b7a0200000000000000000000000000000000000000000000000000000000149050610e1b565b506001949350505050565b7fffffffff000000000000000000000000000000000000000000000000000000008116811461075857600080fd5b6000602082840312156116a057600080fd5b8135610c8e81611660565b60005b838110156116c65781810151838201526020016116ae565b83811115610b995750506000910152565b600081518084526116ef8160208601602086016116ab565b601f01601f19169290920160200192915050565b602081526000610c8e60208301846116d7565b60006020828403121561172857600080fd5b5035919050565b80356001600160a01b0381168114610b0c57600080fd5b6000806040838503121561175957600080fd5b6117628361172f565b946020939093013593505050565b60008060006060848603121561178557600080fd5b61178e8461172f565b925061179c6020850161172f565b9150604084013590509250925092565b6000602082840312156117be57600080fd5b610c8e8261172f565b600080604083850312156117da57600080fd5b50508035926020909101359150565b600080604083850312156117fc57600080fd5b6118058361172f565b91506020830135801515811461181a57600080fd5b809150509250929050565b60006060828403121561183757600080fd5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000806000806080858703121561188257600080fd5b61188b8561172f565b93506118996020860161172f565b925060408501359150606085013567ffffffffffffffff808211156118bd57600080fd5b818701915087601f8301126118d157600080fd5b8135818111156118e3576118e361183d565b604051601f8201601f19908116603f0116810190838211818310171561190b5761190b61183d565b816040528281528a602084870101111561192457600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b6000806040838503121561195b57600080fd5b6119648361172f565b91506119726020840161172f565b90509250929050565b600181811c9082168061198f57607f821691505b602082108103611837577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611a2857611a286119c8565b5060010190565b60008351611a418184602088016116ab565b835190830190611a558183602088016116ab565b01949350505050565b600082821015611a7057611a706119c8565b500390565b60008219821115611a8857611a886119c8565b500190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600082611acb57611acb611a8d565b500490565b600082611adf57611adf611a8d565b500690565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006001600160a01b03808716835280861660208401525083604083015260806060830152611b4560808301846116d7565b9695505050505050565b600060208284031215611b6157600080fd5b8151610c8e8161166056fea264697066735822122061de0babcc7175f14ff4456b2b32b323e130027cf29bd258130d5cbea565a28764736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101a35760003560e01c80638c590917116100ee578063d139d9b911610097578063e0cae63511610071578063e0cae635146103d8578063e1ec3c68146103eb578063e847c83b14610460578063f2fde38b1461047357600080fd5b8063d139d9b914610357578063d8e1feed1461036a578063dc8de29b146103c557600080fd5b80639e6c2959116100c85780639e6c29591461032f5780639f9090c51461033b578063b39120231461034457600080fd5b80638c590917146102de5780638da5cb5b146102f157806399c6679d1461030257600080fd5b80637b185e2c1161015057806380bb72731161012a57806380bb727314610298578063899e5d85146102b85780638a700b53146102cb57600080fd5b80637b185e2c1461025c5780637b9e618d1461027c5780637c3a00fd1461028f57600080fd5b80635b91e8c3116101815780635b91e8c3146102165780636a134bd914610241578063715018a61461025457600080fd5b80631338e957146101a85780633756c22f146101e057806349a1e058146101f5575b600080fd5b6101cb6101b636600461171c565b60056020526000908152604090205460ff1681565b60405190151581526020015b60405180910390f35b6101f36101ee366004611740565b610486565b005b6102086102033660046117c0565b61055a565b6040519081526020016101d7565b600a54610229906001600160a01b031681565b6040516001600160a01b0390911681526020016101d7565b6101f361024f36600461171c565b610640565b6101f36106d4565b61020861026a36600461171c565b60036020526000908152604090205481565b600754610229906001600160a01b031681565b61020860065481565b6102086102a636600461171c565b60046020526000908152604090205481565b600854610229906001600160a01b031681565b6101f36102d93660046117f9565b61073a565b6102086102ec3660046117f9565b610a4a565b6000546001600160a01b0316610229565b61022961031036600461181b565b600090815260026020819052604090912001546001600160a01b031690565b6102086402540be40081565b61020860095481565b6101f361035236600461171c565b610c05565b61020861036536600461181b565b610d13565b6103b461037836600461181b565b6002602081905260009182526040909120805460018201549282015460038301546004909301549193926001600160a01b039091169160ff1685565b6040516101d795949392919061189e565b6102086103d336600461181b565b610de0565b6101f36103e636600461171c565b610fe5565b61044c6103f936600461181b565b60016020819052600091825260409091208054918101546002820154600383015460048401546005850154600690950154939492936001600160a01b0390921692909160ff808316926101009004169088565b6040516101d79897969594939291906118cf565b61020861046e36600461181b565b6110f4565b6101f361048136600461171c565b611113565b3360008181526005602052604090205460ff166104ea5760405162461bcd60e51b815260206004820152600f60248201527f4e6f7420616e206174746573746f72000000000000000000000000000000000060448201526064015b60405180910390fd5b6000858152600260208181526040808420909201546001600160a01b031683526004905290819020859055518490339087907f1321dc98926ed00f4f47a83b9953b28793bb014646db06929c8fe5fda6206bf09061054b908890889061191f565b60405180910390a45050505050565b600954600081815260026020819052604090912084815590810180547fffffffffffffffffffffffff0000000000000000000000000000000000000000163317905560048101805486919060ff191660018360068111156105bd576105bd611834565b0217905550600381810184905533600081815260209283526040908190208590556009546006548251428152948501899052848301529051919290917ff6cc19e46a340ab5888d736bfc79aef72ae92d12d7b76319d72b0abc170868e69181900360600190a3600980549060006106338361199b565b9190505550509392505050565b6000546001600160a01b0316331461069a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104e1565b600880547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b6000546001600160a01b0316331461072e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104e1565b61073860006111f5565b565b60008281526001602052604090819020600a5491517f744f4cf60000000000000000000000000000000000000000000000000000000081526004810185905290916001600160a01b03169063744f4cf690602401600060405180830381600087803b1580156107a857600080fd5b505af11580156107bc573d6000803e3d6000fd5b5050600a546040517f1e0029c800000000000000000000000000000000000000000000000000000000815260048101879052600093506001600160a01b039091169150631e0029c890602401602060405180830381865afa158015610825573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061084991906119d3565b90506000811161089b5760405162461bcd60e51b815260206004820152601560248201527f446f6573206e6f74206f776520616e797468696e67000000000000000000000060448201526064016104e1565b60008184116108aa57836108ac565b815b9050808360040160008282546108c291906119ec565b909155505060075460038401546040517f23b872dd0000000000000000000000000000000000000000000000000000000081526001600160a01b039182166004820152306024820152604481018490529116906323b872dd906064016020604051808303816000875af115801561093d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109619190611a04565b61096a57600080fd5b600a546040517f2047a26700000000000000000000000000000000000000000000000000000000815260048101879052602481018390526001600160a01b0390911690632047a26790604401600060405180830381600087803b1580156109d057600080fd5b505af11580156109e4573d6000803e3d6000fd5b505050508181036109f8576109f88561125d565b600383015481906001600160a01b0316867fa5429926614dc1f98f159430591aa6b73ddbcbfc1431ec98a7efe706b936747942610a358588611a26565b6040805192835260208301919091520161054b565b6000828152600260205260408120600181015481548391610a6a91611a26565b90506000818511610a7b5784610a7d565b815b6007546040517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018390529192506001600160a01b0316906323b872dd906064016020604051808303816000875af1158015610aee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b129190611a04565b610b1b57600080fd5b80836001016000828254610b2f91906119ec565b90915550508254600184015403610b4957610b498661136e565b60085460408051606081018252888152602081018481523382840190815292517fb2e0c9a00000000000000000000000000000000000000000000000000000000081529151600483015251602482015290516001600160a01b0390811660448301529091169063b2e0c9a0906064016020604051808303816000875af1158015610bd7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bfb91906119d3565b9695505050505050565b6000546001600160a01b03163314610c5f5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104e1565b6001600160a01b038116600090815260056020526040902054819060ff16610cc95760405162461bcd60e51b815260206004820152600f60248201527f4e6f7420616e206174746573746f72000000000000000000000000000000000060448201526064016104e1565b6001600160a01b038216600081815260056020526040808220805460ff19169055517f7b1e5155c9ac76eaa3c56fcf63a3383cd696a6fa84c49901c7ae374c0a5086129190a25050565b600081815260016020526040812060050154610100900460ff1680610d475750600082815260016020526040902060020154155b15610d5457506000919050565b600a546040517f1e0029c8000000000000000000000000000000000000000000000000000000008152600481018490526001600160a01b0390911690631e0029c890602401602060405180830381865afa158015610db6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dda91906119d3565b92915050565b6008546040517f7c37722300000000000000000000000000000000000000000000000000000000815260048101839052600091829182916001600160a01b031690637c3772239060240160a060405180830381865afa158015610e47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e6b9190611a4d565b8151600090815260016020526040812060608401516004820154949650929450929091610e9791611a26565b905060008260060154828660200151610eb09190611afa565b610eba9190611b37565b60048085015460608801526008546040517f7ff241ce0000000000000000000000000000000000000000000000000000000081529293506001600160a01b031691637ff241ce91610f18918b91869101918252602082015260400190565b600060405180830381600087803b158015610f3257600080fd5b505af1158015610f46573d6000803e3d6000fd5b50506007546040517fa9059cbb0000000000000000000000000000000000000000000000000000000081526001600160a01b03888116600483015260248201869052909116925063a9059cbb91506044016020604051808303816000875af1158015610fb6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fda9190611a04565b509695505050505050565b6000546001600160a01b0316331461103f5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104e1565b6001600160a01b03811660009081526005602052604090205460ff16156110a85760405162461bcd60e51b815260206004820152601360248201527f416c726561647920616e206174746573746f720000000000000000000000000060448201526064016104e1565b6001600160a01b038116600081815260056020526040808220805460ff19166001179055517f945c4a21d3fce955d17e31fcc471734b3d754c032b3805b02fe75d89c29b2a3a9190a250565b600081815260026020526040812060018101549054610dda9190611a26565b6000546001600160a01b0316331461116d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104e1565b6001600160a01b0381166111e95760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016104e1565b6111f2816111f5565b50565b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60008181526001602052604081206005810180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1661010017905580549091906112a89042611a26565b82549091506000906112ba9042611b72565b835460038501546001600160a01b0316600090815260046020526040902054919250906112e89042906119ec565b6112f29190611a26565b6003840180546001600160a01b03908116600090815260046020908152604091829020949094559154600687015483514281529485015291830185905260608301849052169085907f5751530710eb6f83af18f5aba63d1721745fa34ea155523a93b06d58aadc3ceb906080015b60405180910390a350505050565b6000818152600260208190526040909120015481906001600160a01b03166113d85760405162461bcd60e51b815260206004820152601660248201527f5265717565737420646f6573206e6f742065786973740000000000000000000060448201526064016104e1565b6000828152600260208181526040808420928301546001600160a01b03168452600382528084205484526001909152909120541580156114245750600083815260016020526040902054155b6114705760405162461bcd60e51b815260206004820152601c60248201527f557365722068617320616e206f75747374616e64696e67206c6f616e0000000060448201526064016104e1565b6000838152600160205260409020428082556003830154611490916119ec565b60018083019190915560028083018690558301546003830180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03909216919091179055600483015460058301805460ff90921692909160ff19169083600681111561150757611507611834565b02179055508154600682810191909155600a5490546040517f1ec9f27b000000000000000000000000000000000000000000000000000000008152600481018790526024810182905260448101919091526001600160a01b0390911690631ec9f27b90606401600060405180830381600087803b15801561158757600080fd5b505af115801561159b573d6000803e3d6000fd5b5050600a5460068401546040517f071ffb3c0000000000000000000000000000000000000000000000000000000081526004810189905260248101919091526001600160a01b03909116925063071ffb3c9150604401600060405180830381600087803b15801561160b57600080fd5b505af115801561161f573d6000803e3d6000fd5b5050600754600285015485546040517fa9059cbb0000000000000000000000000000000000000000000000000000000081526001600160a01b03928316600482015260248101919091529116925063a9059cbb91506044016020604051808303816000875af1158015611696573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116ba9190611a04565b50600282015482546040516001600160a01b039092169186917f2b1eb56f9d2886ace1dfc4a1acf6a640b828f3782247397ebf22f6cf09665b7e9161136091428252602082015260400190565b6001600160a01b03811681146111f257600080fd5b60006020828403121561172e57600080fd5b813561173981611707565b9392505050565b6000806000806060858703121561175657600080fd5b8435935060208501359250604085013567ffffffffffffffff8082111561177c57600080fd5b818701915087601f83011261179057600080fd5b81358181111561179f57600080fd5b8860208285010111156117b157600080fd5b95989497505060200194505050565b6000806000606084860312156117d557600080fd5b8335600781106117e457600080fd5b95602085013595506040909401359392505050565b6000806040838503121561180c57600080fd5b50508035926020909101359150565b60006020828403121561182d57600080fd5b5035919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6007811061189a577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b9052565b858152602081018590526001600160a01b03841660408201526060810183905260a08101610bfb6080830184611863565b6000610100820190508982528860208301528760408301526001600160a01b038716606083015285608083015261190960a0830186611863565b92151560c082015260e001529695505050505050565b60208152816020820152818360408301376000818301604090810191909152601f9092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0160101919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036119cc576119cc61196c565b5060010190565b6000602082840312156119e557600080fd5b5051919050565b600082198211156119ff576119ff61196c565b500190565b600060208284031215611a1657600080fd5b8151801515811461173957600080fd5b600082821015611a3857611a3861196c565b500390565b8051611a4881611707565b919050565b60008082840360a0811215611a6157600080fd5b6080811215611a6f57600080fd5b506040516080810181811067ffffffffffffffff82111715611aba577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b80604052508351815260208401516020820152604084015160408201526060840151606082015280925050611af160808401611a3d565b90509250929050565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611b3257611b3261196c565b500290565b600082611b6d577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b6000808312837f800000000000000000000000000000000000000000000000000000000000000001831281151615611bac57611bac61196c565b837f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff018313811615611be057611be061196c565b5050039056fea264697066735822122012e119a9a3d5a76b962f328720dd45aa72a141d80b58a538081faf4f96bffcfd64736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 12677,
        "contract": "src/Borrowers/MicroLoanFactory.sol:MicroLoanFactory",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 15335,
        "contract": "src/Borrowers/MicroLoanFactory.sol:MicroLoanFactory",
        "label": "loans",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_struct(Loan)17466_storage)"
      },
      {
        "astId": 15340,
        "contract": "src/Borrowers/MicroLoanFactory.sol:MicroLoanFactory",
        "label": "requestsById",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_struct(LoanRequest)17478_storage)"
      },
      {
        "astId": 15344,
        "contract": "src/Borrowers/MicroLoanFactory.sol:MicroLoanFactory",
        "label": "requestsByAddress",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 15348,
        "contract": "src/Borrowers/MicroLoanFactory.sol:MicroLoanFactory",
        "label": "creditScores",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 15352,
        "contract": "src/Borrowers/MicroLoanFactory.sol:MicroLoanFactory",
        "label": "attestors",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 15357,
        "contract": "src/Borrowers/MicroLoanFactory.sol:MicroLoanFactory",
        "label": "interestRate",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 15359,
        "contract": "src/Borrowers/MicroLoanFactory.sol:MicroLoanFactory",
        "label": "settlementToken",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 15361,
        "contract": "src/Borrowers/MicroLoanFactory.sol:MicroLoanFactory",
        "label": "creditToken",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 15363,
        "contract": "src/Borrowers/MicroLoanFactory.sol:MicroLoanFactory",
        "label": "IDs",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 15366,
        "contract": "src/Borrowers/MicroLoanFactory.sol:MicroLoanFactory",
        "label": "interestModule",
        "offset": 0,
        "slot": "10",
        "type": "t_contract(InterestModuleLike)15324"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(InterestModuleLike)15324": {
        "encoding": "inplace",
        "label": "contract InterestModuleLike",
        "numberOfBytes": "20"
      },
      "t_enum(LoanPurpose)17443": {
        "encoding": "inplace",
        "label": "enum LoanStructures.LoanPurpose",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(Loan)17466_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct LoanStructures.Loan)",
        "numberOfBytes": "32",
        "value": "t_struct(Loan)17466_storage"
      },
      "t_mapping(t_uint256,t_struct(LoanRequest)17478_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct LoanStructures.LoanRequest)",
        "numberOfBytes": "32",
        "value": "t_struct(LoanRequest)17478_storage"
      },
      "t_struct(Loan)17466_storage": {
        "encoding": "inplace",
        "label": "struct LoanStructures.Loan",
        "members": [
          {
            "astId": 17450,
            "contract": "src/Borrowers/MicroLoanFactory.sol:MicroLoanFactory",
            "label": "start",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 17452,
            "contract": "src/Borrowers/MicroLoanFactory.sol:MicroLoanFactory",
            "label": "deadline",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 17454,
            "contract": "src/Borrowers/MicroLoanFactory.sol:MicroLoanFactory",
            "label": "id",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 17456,
            "contract": "src/Borrowers/MicroLoanFactory.sol:MicroLoanFactory",
            "label": "borrower",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 17458,
            "contract": "src/Borrowers/MicroLoanFactory.sol:MicroLoanFactory",
            "label": "totalPaid",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 17461,
            "contract": "src/Borrowers/MicroLoanFactory.sol:MicroLoanFactory",
            "label": "purpose",
            "offset": 0,
            "slot": "5",
            "type": "t_enum(LoanPurpose)17443"
          },
          {
            "astId": 17463,
            "contract": "src/Borrowers/MicroLoanFactory.sol:MicroLoanFactory",
            "label": "closed",
            "offset": 1,
            "slot": "5",
            "type": "t_bool"
          },
          {
            "astId": 17465,
            "contract": "src/Borrowers/MicroLoanFactory.sol:MicroLoanFactory",
            "label": "amount",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(LoanRequest)17478_storage": {
        "encoding": "inplace",
        "label": "struct LoanStructures.LoanRequest",
        "members": [
          {
            "astId": 17468,
            "contract": "src/Borrowers/MicroLoanFactory.sol:MicroLoanFactory",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 17470,
            "contract": "src/Borrowers/MicroLoanFactory.sol:MicroLoanFactory",
            "label": "amountFilled",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 17472,
            "contract": "src/Borrowers/MicroLoanFactory.sol:MicroLoanFactory",
            "label": "borrower",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 17474,
            "contract": "src/Borrowers/MicroLoanFactory.sol:MicroLoanFactory",
            "label": "duration",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 17477,
            "contract": "src/Borrowers/MicroLoanFactory.sol:MicroLoanFactory",
            "label": "purpose",
            "offset": 0,
            "slot": "4",
            "type": "t_enum(LoanPurpose)17443"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}